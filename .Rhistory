d=c(1, 2, 3, 4)
e=c("red", "white", "red", NA)
f=c(TRUE, TRUE, TRUE, FALSE)
mydf=data.frame(d,e,f)
mydf
names(mdf)
names(mydf)
names(mydf)=c("ID", Color", "Passed")
names(mydf)=c("ID", "Color", "Passed")
names(mydf)
mydf[2:3]
mydf[c("ID", "Color")]
mydf$ID
mydf[2,]
nrow(mydf);
nrow(mydf)
ncol(mydf)
head(mydf,3)
tail(mydf, 2)
rm(list=ls())
getwd()
setwd(C:/Users/Alba/Documents/STAT 3654)
setwd("C:/Users/Alba/Documents/STAT 3654"")
getwd()
""
setwd("C:/Users/Alba/Documents/STAT 3654")
getwd
getwd()
source('~/.active-rstudio-document', echo=TRUE)
d=c(1, 2, 3, 4)
e=c("red", "white", "red", NA)
f=c(TRUE, TRUE, TRUE, FALSE)
mydf=data.frame(d,e,f)
attach(mydf) #attach a DF for fewer keystrokes
d=c(1, 2, 3, 4)
d
d
d
detach(mydf) #don't forget to detach
write.csv(mydf, file="mydf.csv")
summary(mydf)
require(ggplot2) #load the package and the data
library(ggplot2) #load the package and the data
install.packages("ggplot2")
require(ggplot2) #load the package and the data
a=factor(c("yes", "yes", "no"))
a=list(3, "Sam", TRUE, 1+0, 1i, c(1,4,7))
c=factor(c("yes", "yes", "no"))
table(a)
a=factor(c("yes", "yes", "no"), levels=c("yes", "no")) #makes yes the base level, before no was the base level because n comes before y in the alphabet
table(a)
a
c=0/0
c
is.nan(c)
b=NA
is.na(c)
is.nan(c)
c=NA
is.na(c)
is.na(c)
is.nan(c)
a=c(1, 2, NA, 4, NA, 5)
is.na(a)
b=a[is.na(a)]
b=a[!is.na(a)] #exclamation is negation
b
airq =data.frame(ozone-c(2,3,4), wind=c(2,NA,5), ozone=c(NA, 5, 3))
airq =data.frame(ozone=c(2,3,4), wind=c(2,NA,5), ozone=c(NA, 5, 3))
airq
good=complete.cases(airq) #for dataframe
good #gppd represents which rows are complete (Without NA)
airquality[good,]
airq[good,]
airq
delta = 2
sigma = 1
alpha =.05
n = 7
df = 2*(n-1)
constant = delta/(Sigma*sqrt(2))
constant = delta/(sigma*sqrt(2))
ncp = constant*sqrt(n)
alpha_2 = alpha/2
critical = qt(1-alpha_2,df)
p1 = pt(critical, df, ncp)
p2 = pt(-critical, df, ncp)
power = 1-p1-p2
print(power)
ybar = 3
mu0 = 0
s = .7
n = 20
t = (ybar - mu0)/(s/sqrt(n))
print(t)
t.alpha = qt(1-alpha, df = n-1)
print(t.alpha)
ybar = 2.1
ybar = 2.1
mu0 = 2
s = .3
n = 35
t = (ybar - mu0)/(s/sqrt(n))
print(t)
alpha = .05
t.alpha = qt(1-alpha, df = n-1)
print(t.alpha)
print(t.alpha)
help(qt)
ybar = 2.1
mu0 = 2
s = .3
n = 35
t = (ybar - mu0)/(s/sqrt(n))
print(t)
pval = pt(t, df = n-1, lower.tail = FALSE)
print(pval)
mu_1 = 4
mu_2 = 2
stddev = 1
delta = (mu1-mu2)/stddev
mu1 = 4
mu2 = 2
stddev = 1
delta = (mu1-mu2)/stddev
alpha = .05
target\_power = .90
target_power = .90
alpha_2 = alpha/2
constant = delta/(sigma*sqrt(2))
power = 0
n=1
cond = target\_power - power
cond = target_power - power
while(cond $>$ 0) \{
while(cond > 0) \{
while(cond > 0) \{
while(cond > 0) {
n=n+1
df = 2*(n-1)
critical = qt(1-alpha\_2, df)
while(cond > 0) {
n=n+1
df = 2*(n-1)
critical = qt(1-alpha\_2, df)
while(cond > 0) {
n=n+1
df = 2*(n-1)
critical = qt(1-alpha_2, df)
ncp = constant *sqrt(n)
p1=pt(critical,df,ncp)
p2=pt(-critical,df,ncp)
power=1-p1-p2
cond=target_power-power }
print(n)
print(power)
